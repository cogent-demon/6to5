#!/usr/bin/env node

var commander = require("commander");
var readdir   = require("fs-readdir-recursive");
var mkdirp    = require("mkdirp");
var path      = require("path");
var util      = require("../lib/6to5/util");
var to5       = require("../lib/6to5/node");
var fs        = require("fs");
var _         = require("lodash");

commander.option("-t, --source-maps-inline", "Append sourceMappingURL comment to bottom of code");
commander.option("-s, --source-maps", "Save source map alongside the compiled code when using --out-file and --out-dir flags");
//commander.option("-w, --watch", "Watch, only works with --out-dir");

var list = function (val) {
  return val ? val.split(",") : [];
};

commander.option("-w, --whitelist [whitelist]", "Whitelist", list);
commander.option("-b, --blacklist [blacklist]", "Blacklist", list);
commander.option("-o, --out-file [out]", "Compile all input files into a single file");
commander.option("-d, --out-dir [out]", "Compile an input directory of modules into an output directory");

var pkg = require("../package.json");
commander.version(pkg.version);
commander.usage("[options] <files ...>");
commander.parse(process.argv);

//

var errors = [];

var filenames = commander.args;

_.each(filenames, function (filename) {
  if (!fs.existsSync(filename)) {
    errors.push(filename + " doesn't exist");
  }
});

if (commander.outDir && !filenames.length) {
  errors.push("filenames required for --out-dir");
}

if (commander.outFile && commander.outDir) {
  errors.push("cannot have --out-file and --out-dir");
}

if (errors.length) {
  console.error(errors.join(". "));
  process.exit(2);
}

//

var readdirFilter = function (filename) {
  return readdir(filename).filter(util.canCompile);
};

var mainOpts = {
  blacklist: commander.blacklist,
  whitelist: commander.whitelist,
  sourceMap: commander.sourceMaps
};

if (commander.sourceMapsInline) {
  mainOpts.sourceMap = "inline";
}

var data = [];

var compile = function (filename) {
  return to5.transformFileSync(filename, _.clone(mainOpts));
};

if (commander.outDir) {
  var write = function (src, relative) {
    var data = compile(src);

    var dest = path.join(commander.outDir, relative);

    var up = path.normalize(dest + "/..");
    mkdirp.sync(up);

    if (commander.sourceMaps) {
      fs.writeFileSync(dest + ".map", data.map.toJSON());
    }

    fs.writeFileSync(dest, data.code);

    console.log(src + " -> " + dest);
  };

  var handle = function (filename) {
    var stat = fs.statSync(filename);

    if (stat.isDirectory(filename)) {
      var dirname = filename;

      _.each(readdirFilter(dirname), function (filename) {
        write(path.join(dirname, filename), filename);
      });
    } else {
      write(filename, filename);
    }
  };

  _.each(filenames, handle);
} else {
  if (commander.sourceMaps) {
    mainOpts.sourceMap = "inline";
  }

  var data = [];

  var finish = function () {
    data = data.join("\n");

    if (commander.outFile) {
      fs.writeFileSync(commander.outFile, data);
    } else {
      console.log(data);
    }
  };

  if (filenames.length) {
    var _filenames = filenames;
    filenames = [];

    _.each(_filenames, function (filename) {
      var stat = fs.statSync(filename);
      if (stat.isDirectory()) {
        var dirname = filename;

        _.each(readdirFilter(filename), function (filename) {
          filenames.push(path.join(dirname, filename));
        });
      } else {
        filenames.push(filename);
      }
    });

    _.each(filenames, function (filename) {
      data.push(compile(filename).code);
    });

    finish();
  } else {
    var code = "";

    process.stdin.setEncoding("utf8");

    process.stdin.on("readable", function () {
      var chunk = process.stdin.read();
      if (chunk !== null) code += chunk;
    });

    process.stdin.on("end", function() {
      var opts = _.extend({ filename: "stdin" }, mainOpts);
      data.push(to5.transform(code, opts).code);
      finish();
    });
  }
}
